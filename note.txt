- setup
- cmd> python -m venv venv
- cmd> venv\Scripts\activate
- venv> this will be omitted for brevity
> git init
> add .gitignore
> git add .
> git commit -m "base commit"
- add Dockerfile
- add .dockerignore
- add docker-compose.yml
- move whl files to whl folder
- in django settings.py, switch to postgresql
> docker-compose up -d --build
- navigate to 127.0.0.1:8000 to see django welcome page
- add accounts app (so later custom user model can be added to it)
> docker-compose exec web python manage.py startapp accounts
- add custom user model to accounts/models.py
- add accounts app to installed_apps
- add AUTH_USER_MODEL to settings.py
- make migrations for accounts app
> docker-compose exec web python manage.py makemigrations accounts
- run migrations
> docker-compose exec web python manage.py migrate
- add pages app
- add pages app to installed_apps
- add index view to pages app
- add forms.py to accounts app
- in it, add two forms: CustomUserCreationForm and CustomUserChangeForm
- since we have a custom user model, admin user must also inherit from it
- update accounts/admin.py
- create a superuser
> docker-compose exec web python manage.py createsuperuser
- admin-admin@example.com-1
- check
- add some tests for user model in accounts/tests.py (should be 2 tests now)
> docker-compose exec web python manage.py test

- setup is complete

- adding templates
- update the TEMPLATES var in settings.py
- add _base.html to templates dir
- add home.html to pages folder (which goes inside templates directory)
- home.html will inherit from _base.html
- re-write index view to class based generic view
- restart the containers (any change in settings.py requires restart)
- add tests for home page in pages/tests.py (should be 5 tests now)
> docker-compose exec web python manage.py test
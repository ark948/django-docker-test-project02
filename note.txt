- SETUP
- cmd> python -m venv venv
- cmd> venv\Scripts\activate
- venv> this will be omitted for brevity
> git init
> add .gitignore
> git add .
> git commit -m "base commit"
- add Dockerfile
- add .dockerignore
- add docker-compose.yml
- move whl files to whl folder
- in django settings.py, switch to postgresql
> docker-compose up -d --build
- navigate to 127.0.0.1:8000 to see django welcome page
- add accounts app (so later custom user model can be added to it)
> docker-compose exec web python manage.py startapp accounts
- add custom user model to accounts/models.py
- add accounts app to installed_apps
- add AUTH_USER_MODEL to settings.py
- make migrations for accounts app
> docker-compose exec web python manage.py makemigrations accounts
- run migrations
> docker-compose exec web python manage.py migrate
- add pages app
- add pages app to installed_apps
- add index view to pages app
- add forms.py to accounts app
- in it, add two forms: CustomUserCreationForm and CustomUserChangeForm
- since we have a custom user model, admin user must also inherit from it
- update accounts/admin.py
- create a superuser
> docker-compose exec web python manage.py createsuperuser
- admin-admin@example.com-1
- check
- add some tests for user model in accounts/tests.py (should be 2 tests now)
> docker-compose exec web python manage.py test

- SETUP IS COMPLETE

- adding templates
- update the TEMPLATES var in settings.py
- add _base.html to templates dir
- add home.html to pages folder (which goes inside templates directory)
- home.html will inherit from _base.html
- re-write index view to class based generic view
- restart the containers (any change in settings.py requires restart)
- add tests for home page in pages/tests.py (should be 5 tests now)
> docker-compose exec web python manage.py test


- ADDING BASIC AUTHENTICATION (and later advanced authentication)
- login, logout, sign up
- login and logout using django's auth app
- sign up requires more, since no built in solution available
- to use auth app, explicitly include in main urls.py file (prefix it with accounts app - common)
- add links for login and logout to home.html template
> mkdir templates/registration
- add login.html to templates/registration
- add LOGIN_REDIRECT_URL to settings.py
- add LOGOUT_REDIRECT_URL to settings.py
- update home.html to include a logout (as of django 5, logout must be form-post)
- to add signup:
- add a urls.py file to accounts, and add a route for sign up to it
- include the accounts urls.py file in main urls.py file BELOW the built in auth path
- add sign up view to accounts/views.py
- add signup.html to templates/registration folder
- update home.html to include a link to sign up page
- add test for signup page (template, html content, which form was used, url and if view name resolved)
- BASIC AUTHENTICATION DONE


- STATIC ASSETS
- create a project level static directory and in it, css, js and images folder
> mkdir static
- add base.css to static/css
- base.js to static/js
- and .keep file to static/images folder
- add STATICFILES_DIRS to settings.py (django's builtin staticfiles app will use this)
- to test if base.css was loaded correctly add a simple ruleset to it
- update the base.html to include a link to base.css and bace.js
- also include the load static tag in base.html
- include the load static app in home.html as well and load a sample logo pic
- add a simple console message to base.js to check if it was loaded (inlude it in base.html)
- check chrome's console for this
- Configuring collectstatic command
- this command combines all static files to be sent in one request (instead of a request for each)
- add STATIC_ROOT to settings.py
- next, explicitly declare the file storage engine that django will use to colect static files
- set STATICFILES_STORAGE in settnigs.py
- now run the collect static command
> docker-compose exec web python manage.py collectstatic
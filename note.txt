- SETUP
- cmd> python -m venv venv
- cmd> venv\Scripts\activate
- venv> this will be omitted for brevity
> git init
> add .gitignore
> git add .
> git commit -m "base commit"
- add Dockerfile
- add .dockerignore
- add docker-compose.yml
- move whl files to whl folder
- in django settings.py, switch to postgresql
> docker-compose up -d --build
- navigate to 127.0.0.1:8000 to see django welcome page
- add accounts app (so later custom user model can be added to it)
> docker-compose exec web python manage.py startapp accounts
- add custom user model to accounts/models.py
- add accounts app to installed_apps
- add AUTH_USER_MODEL to settings.py
- make migrations for accounts app
> docker-compose exec web python manage.py makemigrations accounts
- run migrations
> docker-compose exec web python manage.py migrate
- add pages app
- add pages app to installed_apps
- add index view to pages app
- add forms.py to accounts app
- in it, add two forms: CustomUserCreationForm and CustomUserChangeForm
- since we have a custom user model, admin user must also inherit from it
- update accounts/admin.py
- create a superuser
> docker-compose exec web python manage.py createsuperuser
- admin-admin@example.com-1
- check
- add some tests for user model in accounts/tests.py (should be 2 tests now)
> docker-compose exec web python manage.py test

- SETUP IS COMPLETE

- adding templates
- update the TEMPLATES var in settings.py
- add _base.html to templates dir
- add home.html to pages folder (which goes inside templates directory)
- home.html will inherit from _base.html
- re-write index view to class based generic view
- restart the containers (any change in settings.py requires restart)
- add tests for home page in pages/tests.py (should be 5 tests now)
> docker-compose exec web python manage.py test


- ADDING BASIC AUTHENTICATION (and later advanced authentication)
- login, logout, sign up
- login and logout using django's auth app
- sign up requires more, since no built in solution available
- to use auth app, explicitly include in main urls.py file (prefix it with accounts app - common)
- add links for login and logout to home.html template
> mkdir templates/registration
- add login.html to templates/registration
- add LOGIN_REDIRECT_URL to settings.py
- add LOGOUT_REDIRECT_URL to settings.py
- update home.html to include a logout (as of django 5, logout must be form-post)
- to add signup:
- add a urls.py file to accounts, and add a route for sign up to it
- include the accounts urls.py file in main urls.py file BELOW the built in auth path
- add sign up view to accounts/views.py
- add signup.html to templates/registration folder
- update home.html to include a link to sign up page
- add test for signup page (template, html content, which form was used, url and if view name resolved)
- BASIC AUTHENTICATION DONE


- STATIC ASSETS
- create a project level static directory and in it, css, js and images folder
> mkdir static
- add base.css to static/css
- base.js to static/js
- and .keep file to static/images folder
- add STATICFILES_DIRS to settings.py (django's builtin staticfiles app will use this)
- to test if base.css was loaded correctly add a simple ruleset to it
- update the base.html to include a link to base.css and bace.js
- also include the load static tag in base.html
- include the load static app in home.html as well and load a sample logo pic
- add a simple console message to base.js to check if it was loaded (inlude it in base.html)
- check chrome's console for this
- Configuring collectstatic command
- this command combines all static files to be sent in one request (instead of a request for each)
- add STATIC_ROOT to settings.py
- next, explicitly declare the file storage engine that django will use to colect static files
- set STATICFILES_STORAGE in settnigs.py
- now run the collect static command
> docker-compose exec web python manage.py collectstatic


- ADDING BOOTSTRAP
- I'm going to skip this part, stil not sure whether to use bootstrap or tailwind
- although navbar should be added at this point
- move login, logout and signup links to base and remove them from home
- add about page (nothing special) and some tests for it
- should be 15 tests
- ADDING django-cripsy-forms (not the bootstrap template pack - cripsy-bootstrap5 - maybe later)
- requires: nothing
- update Dockerfile
- rebuild the image
> docker-compose down
> docker-compose up -d --build
- add it to installed_apps (the name should be "crispy_forms")
- edit signup html page to use cripsy forms (include load tag and form tag)
- check the signup page (result: not sure if it worked)
- MISTAKE detected: using the old version of django_crispy_forms
- updating right now
- the forms are not displaying any improvements, maybe because of no css framework thing
- i will install django_crispy_forms and skip template pack (i'll come back later)
- for now, just install it
- upon navigating to a page with crispy tag used...
- error: Settings object has no attribute CRISPY_TEMPLATE_PACK
- i will attempt to add this with value of None
- not working, no luck in finding a similar issue online
- perhaps this package just needs a ui library to work
- i'm going to try adding crispy-bootstrap5 without actually having bootstrap5
- just to get around this issue
- the signup page that is using the crispy tag is loading fine...
- but signup form has no visual improvement
- for the sake of consistency, i will add to the login form as well and move on


- ADVANCED AUTHENTICATION
- package to install: django-allauth
- requirements (in order): PyJWT, defusedxml, python3_openid, certifi, charset_normalizer, idna
- urllib3, requests, oauthlib, requests_oauthlib, pycparser, cffi, cryptography
- finally django-allauth
- new requirement discovered while trying to install django-allauth, setuptools>=40
- downloaded and included it in Dockerfile, still the same error
- IMPORTANT
- the only way to install django-allauth (that worked for me) was to build wheel file for it first
- whl file must be built using python wheel package and django allauth's tar.gz file
- after the whl file was generated, it can be installed like any other whl file
- django-allauth requires to be added to installed_apps
- SITE_ID must be added as well
- also django.contrib.sites must be added to installed_apps as well
- authentication backends needs to be updated (this config var is actually hidden in settnigs.py)
- allauth authentication backend needs to be added to django's authentication backend (explicitly)
- this and site_id should go to the bottom of settings.py
- next an email server must be explicitly added to settings.py (for now, i'll use console)
- next is ACCOUNT_LOGOUT_REDIRECT for allauth that will overwrite the LOGOUT_REDIRECT_URL
- it's best to explicitly set it as well
> docker-compose exec web python manage.py migrate
- error: allauth middleware must be added to MIDDLEWEARE config var
- adding it now, running migrate again
- ok
- next, replacing default auth app urls with allauth urls (still in accounts app)
- in main urls.py, remove django.contrib.auth.urls
- add allauth.urls in its place
- since allauth already has signup view and route, accounts app urls can be deleted as well
- at this point, accounts/urls.py and accounts/views.py can be deleted as well
- because they were only added for signup feature (i won't do it though, yet)
- now templates, allauth looks for templates in templates/account directory
- mkdir templates/account (NOTICE it is account not accounts)
- move login.html and signup.html to it
- last step, update base template to point to allauth routes instead of auth or accounts signup
- add account_ prefix to login and logout and signup
- we can remove the remember_me feature by adding ACCOUNT_SESSION_REMEMBER to settings.py
- add intermediary logout page to templates/account/ logout.html
- check if everything works correctly
- PROBLEM 01: intermediary logout page not displaying => FIXED
- to make signup page only ask for password once, add ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False (ok)
- to add email only login (instead of username) add four config vars to settings.py
- accounts/tests.py needs to be updated after adding django-allauth
- run tests again (14 tests)
- skipped adding social authentication

- Trying to add a UI library
- choices: Bootstrap5, Tailwind, Bulma, Simple.css and others (HTMX, Apline)
- trying out simple.css 01
- downloaded simple.css main css file and moved it to static/css
- updated the base.html according to the doc of simple.css
- switching the link of base.css in base.html to use simple.css instead of base.css
- ok, not terrible, but not good either
- removing the logo
- actually, it's ok
- i'm going to try tailwind now, but simple.css remains here as an option
- before doing that i will commit to git, in case everything went haywire
- problem: unfamiliar with node, npm, and how these two go together
- for now i'll just go with simple.css


- ADDING ENVIRONMENT VARIABLES
- installing python_dotenv, packaging, marshmallow, enivorns, dj_database_url
- and env stuff to the top of settings.py
- move SECRET_KEY from settings.py to docker-compose.yml
- (notice: if SECRET_KEY has a dollar sign, add another dollar sign to it)
- this SECRET_KEY is still visible in source control
- in actuality, we will add this to docker-compose-prod.yml and add this file to gitignore
- restart container
- next DEBUG and ALLOWED_HOSTS
- when debug is set to false, it requires list of allowed hosts
- set DEBUG to false and ALLOWED_HOSTS
- move DEBUG to docker-compose.yml
- next comes DATABASE (dj-database-url packages neest to be installed for this)
- set the DATABASES config var in settings.py (DO NOT CHANGE)
- book uses Heroku, the variable mentioned in book (DATABASE_URL) will be provided by Heroku
- so i will not change it
- right now, DATABASE config var is pointing to 'db' service in docker-compose which is good
- commit


- EMAIL
- mkdir templates/account/email
- create two new files in it: email_confirmation_subject.txt
- and email_confirmation_message.txt
- edit the domain name in admin interface sites section
- update the DEFAULT_FROM_EMAIL
- sign up a new user to see the effects
- PROBLEM 02: Email confirm page raises 404 error [FIXED]
- add email_confirm.html to templates/account
- check the urls for password reset and password change
- http://127.0.0.1:8000/accounts/password/reset/
- http://127.0.0.1:8000/accounts/password/change/
- password reset is working fine, just needs polishing
- password change is also working fine, but is ugly
- in the next chapter, i will try to integrate wagtail cms (instead of book app)
- and fix the email confirm problem
- commit


- FIXING PROBLEM 02:
- found the problem, somehow there is an extra forward slash at the end of the...
- confirmation url
- need to find it in email_confirm.html and remove it
- weird, all forward slashes are just closing html tags, there is no extra slash to cause this issue
- FOUND IT, the problem was in email_confirmation_message.txt
- right after {{ activate_url }}
- there was an extra slash
- removing it fixed the problem
- commiting


- ADDING Wagtail (MAIN FUNCTION)
- GOAL: to use wagtail as blogging platform
- users must be able to sign up, confirm their email
- create new blogs with editing features and hashtags
- explore blogs and search among them by hashtag or author
- follow authors
- comment on blogs
- added all whl files
- attempting to build image - done
- adding apps to installed_apps
- and a middlware
- and STATIC_ROOT (already there)
- and MEDIA_ROOT and MEDIA_URL
- add wagtail site name
- and wagtail admin base (don't exactly know what this is)
- apparently this is not required but recommended
- and wagtail extensions
- now edit the urls.py 
- configure django to serve user uploaded files at the end of urls.py
- after these settings, migrate command must be ran to create wagtail database tables
- attempting to run migrate command
> docker-compose exec web python manage.py migrate
- CRAP, forgot to install wagtail package itself
- need to rebuild the image
- attempting run migrate again - ok
- restarting containers
- OK, cms, and pages working, but documents/ raises 404
- found a project called puput, which is a wagtail based blog app
- it even has a tutorial on how to install it as a standalone blog app
- exactly what i had in mind
- i'm going to use them both
- i will move wagtail itself to wagtail-blog url and puput to puput-blog url
- this note file is getting long and impractical (CLEAN LATER)

- PROBLEM 03: requirements.txt not updating and how to delete whl file from repo...
- without breaking project
- going to manually add dependencies to requirements.txt


- ADDING Puput (Single blog app on top of wagtail)
- pip install puput and its dependencies
- add apps listed in puput's documentation
- add wagtail middleware
- add something called request context processor to TEMPLATES var (already present)
- set wagtail_site_name to the name of your website
- set wagtailadmin_base_url to the name of your website
- configure MEDIA_ROOT and MEDIA_URL
- place puput's urls at the bottom of the urlpatterns, it also includes wagtails urls
- the word 'bottom' was bold in documentation
- (i will remove wagtail urls for now)
- make urls.py file to server static files by updating urlpatterns
- file/image chapter of book seems very useful here
- run migrate and ...
- python manage.py puput_initial_data to laod initial data
- open browser at localhost/blog/ to view blog home page
- localhost/blog_admin/ to view admin stie and edit documents
- let's convert commands to docker commands
> docker-compose exec web python manage.py migrate
> docker-compose exec web python manage.py puput_initial_data
- no problem so far...
- restarting
- setup is complete. blog loads without problem
- RESULTS: puput is successfully added, but it's better for single user blogs for me
- not a blogging platform for everyone to post on
- i will try to implement my own blog app, then work wagtail out